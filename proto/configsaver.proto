// Copyright 2021 ForgeRock AS. All Rights Reserved
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

option go_package = "github.com/ForgeRock/configsaver;proto";
// option java_multiple_files = true;
// option java_package = "io.grpc.examples.helloworld";
// option java_outer_classname = "HelloWorldProto";

package configsaver;

// The ConfigSaver service definition.
service ConfigSaver {
  // Get a comfiguration from the server.
  rpc GetConfig (GetConfigRequest) returns (GetConfigReply) {}
  // Save an updated configuration to the server.
  // The server is responsible for determining whether the configuration is valid, has changed
  // and how to persist it.
  rpc UpdateConfig(UpdateConfigRequest) returns (UpdateConfigReply) {}

}

// Get a bundle of configuration files in tar format
message GetConfigRequest {
  // commit or branch.
  string commit_id = 1;
  // product id is am,idm,ig, etc.
  string product_id = 2;
}

message GetConfigReply {
  string commit_id = 1;
  // the tar file of files as a byte array
  bytes config_tar = 2;
  // 0 for success, 1 for failure
  int32 status = 3;
  string error_message = 4;
}

// Send a single changed file to the server
// TODO: Do we need this?
message UpdateFileRequest {
  string commit_id = 1;
  string product_id = 2;
  // The contents of the file
  bytes contents = 3;
  // relative path to the file
  string path = 4;
}

// Update a batch of files in a tar archive
// The client can attempt to be "nice" and only send changed files, but
// the server should be able to deal with duplicate files.
message UpdateConfigRequest {
  string commit_id = 1;
  string product_id = 2;
  // tar archive of any new or changed files
  bytes config_tar = 3;
  // TOOD: Do we need this?
  // List of files that were deleted on the client config
  repeated string Deleted_files = 4;
}


message UpdateConfigReply {
  string commit_id = 1;
  int32 status = 2;
  string error_message = 3;
}
